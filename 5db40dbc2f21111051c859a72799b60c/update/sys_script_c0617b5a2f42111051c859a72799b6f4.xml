<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>false</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>sc_request</collection>
        <condition>current.operation()==="update"</condition>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>IT Assist GetWatchNotifChge</name>
        <order>200</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[var follsandapps = [];
var grprofile = new GlideRecord("live_group_profile");
grprofile.addQuery('document', current.getValue("sys_id"));
grprofile.query();
if (grprofile.next()) {
	var followerinfo = grprofile.getValue("sys_id");
	var grmember = new GlideRecord("live_group_member");
	grmember.addQuery('group', followerinfo);
	grmember.query();
	while (grmember.next()) {
		var follower_name = grmember.getDisplayValue("member");
		var grfollower = new GlideRecord("sys_user");
		grfollower.addQuery('name', follower_name);
		grfollower.query();
		if (grfollower.next())
			var followerId = grfollower.getValue("sys_id");
		follsandapps.push(followerId);
	}
}
for (var i = 0; i < follsandapps.length; i++) {
    (function executeRule(current, previous) {
        var rm = new sn_ws.RESTMessageV2("ITAssistWorkbenchPing", "ITAssistWorkbenchPing");
		// modified for horiz table usage
		var itsm_horiz = new GlideRecord("x_831378_kore_ai_0_it_assist_config_horiz");
		itsm_horiz.query();
		var workbenchheaders = [
			"accept", "authorization", "datatable", "endpoint",
			"integration_service", "platform", "serv_host"
		];
		while (itsm_horiz.next()) {
			for (var header in workbenchheaders) {
				var header_val = itsm_horiz[workbenchheaders[header]] + '';
				if (workbenchheaders[header] == "authorization")
					header_val = itsm_horiz.getElement("authorization").getDecryptedValue();
				rm.setStringParameterNoEscape(workbenchheaders[header], header_val);
			}
		}
        var number = current.getValue("number");
        var actions = [];
        actions.push({
            "type": "postback",
            "label": "View Details",
            "value": "show ticket number " + number
        });
        actions.push({
            "type": "postback",
            "label": "Comment",
            "value": "Comment"
        });
        var tableMap = {
			sc_request: "REQUEST",
            incident: "INCIDENT",
            sc_req_item: "REQUEST_ITEM"
        };
        var requestState = current.request_state.getDisplayValue();
        var item = {};
        if (requestState === "Closed Complete" || requestState === "Closed Incomplete" || requestState === "Closed Rejected" || requestState === "Closed Cancelled") {
            var userid = current.sys_updated_by;
            var gr = new GlideRecord('sys_user');
            gr.addQuery('user_name', userid);
            gr.query();
            if (gr.next())
                var userName = gr.name;
            item = {
                "_id": current.sys_id.getDisplayValue(),
                "title": userName + " closed " + number,
                "ticket": number,
                "ticket_type": tableMap[current.sys_class_name] || "UNKNOWN",
                "class": current.getValue('sys_class_name'),
                "body": " ",
                "actions": actions,
                "target_type": "USER",
                "series": "second",
                "target_id": follsandapps[i],
                "system": "servicenow",
                "created": current.getValue('sys_created_on')
            };
        }
		rm.setRequestBody(JSON.stringify({
            "notifications": [item]
        }));
        var response = rm.executeAsync();
    })(current, previous);
}]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-09-22 19:24:54</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>c0617b5a2f42111051c859a72799b6f4</sys_id>
        <sys_mod_count>19</sys_mod_count>
        <sys_name>IT Assist GetWatchNotifChge</sys_name>
        <sys_overrides/>
        <sys_package display_value="IT Assist" source="x_831378_kore_ai_0">5db40dbc2f21111051c859a72799b60c</sys_package>
        <sys_policy/>
        <sys_scope display_value="IT Assist">5db40dbc2f21111051c859a72799b60c</sys_scope>
        <sys_update_name>sys_script_c0617b5a2f42111051c859a72799b6f4</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-03-13 13:22:59</sys_updated_on>
        <template/>
        <when>after</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=c0617b5a2f42111051c859a72799b6f4"/>
</record_update>
